plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
}

group = 'love.chihuyu'
version = ''

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

configurations {
    ktlint
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.exposed:exposed-core:0.37.3'
    implementation 'org.jetbrains.exposed:exposed-jdbc:0.37.3'
    implementation 'org.jetbrains.exposed:exposed-dao:0.37.3'
    implementation 'org.jetbrains.exposed:exposed-java-time:0.37.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.2'
    ktlint 'com.github.shyiko:ktlint:0.31.0'
}

task ktlint(type: JavaExec, group: "verification") {
    ignoreExitValue true
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    ignoreExitValue true
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    from {
        duplicatesStrategy 'exclude'
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

compileKotlin {task ->
    task.dependsOn ktlintFormat
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
